var vira;(()=>{"use strict";var e={826:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Helmet=void 0;const r=n(223);class i extends r.Component{static SSR(e){const t=/(<helmet\b[^>]*>)((.|\n)*?)(<\/helmet>)/gm,n=[],r=[];if(null===document||void 0===document?void 0:document.head){let e=document.head.children;for(let t=0;t<e.length;t++)-1===n.indexOf(e[t])&&n.push(e[t])}let i;for(;null!=(i=t.exec(e));){const e=i[1],t=i[2];e.includes('data-placement="head"')&&!n.includes(t)?n.push(t):r.includes(t)||r.push(t)}return{body:e.replace(t,""),head:n,footer:r}}mount(){var e,t,n,i;for(const o of this.props.children){const s=this.props.footer?document.body:document.head,a=o.tagName;let c=[];c.push(o.innerText);for(let n=0;n<o.attributes.length;n++)c.push(null===(e=o.attributes.item(n))||void 0===e?void 0:e.name.toLowerCase()),c.push(null===(t=o.attributes.item(n))||void 0===t?void 0:t.value.toLowerCase());if("HTML"===a||"BODY"===a){const e=document.getElementsByTagName(a)[0];for(let t=1;t<o.attributes.length;t+=2)e.setAttribute(c[t],c[t+1]);return}if("TITLE"===a){const e=document.getElementsByTagName(a);if(e.length)e[0].text=o.text;else{const e=(0,r.h)("title",null,o.innerHTML);s.appendChild(e)}return}let l=!1;c=c.sort();const d=document.getElementsByTagName(a);for(let e=0;e<d.length;e++){let t=[];t.push(d[e].innerText);for(let r=0;r<d[e].attributes.length;r++)t.push(null===(n=d[e].attributes.item(r))||void 0===n?void 0:n.name.toLowerCase()),t.push(null===(i=d[e].attributes.item(r))||void 0===i?void 0:i.value.toLowerCase());t=t.sort(),c.length>0&&t.length>0&&JSON.stringify(c)===JSON.stringify(t)&&(l=!0)}l||(0,r.appendChildren)(s,o)}}render(){return isSSR?(0,r.h)("helmet",{"data-ssr":!0,"data-placement":this.props.footer?"footer":"head"},this.props.children):[]}}t.Helmet=i},35:function(e,t,n){var r=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n};Object.defineProperty(t,"__esModule",{value:!0}),t.Img=void 0;const i=n(223),o=n(930);class s extends i.Component{constructor(e){super(e);const{key:t,src:n}=this.props;this.id=(0,o.strToHash)(n)+"-"+(0,o.strToHash)(JSON.stringify(this.props)),t&&(this.id+=`$key-${t}`),this.state||this.setState({image:"",isLoaded:!1})}mount(){const e=this.props,{lazy:t=!0,placeholder:n,key:o,ref:s,children:a}=e,c=r(e,["lazy","placeholder","key","ref","children"]);t&&new IntersectionObserver(((e,t)=>{for(const n of e)n.isIntersecting&&(t.disconnect(),this.state.image=(0,i.h)("img",Object.assign({},c)),this.state.image.complete?(this.state.isLoaded=!0,this.update()):this.state.image.onload=()=>{this.state.isLoaded=!0,this.update()})}),{threshold:[0,1]}).observe(this.elements[0])}render(){const e=this.props,{lazy:t=!0,src:n,placeholder:o,key:s,ref:a,children:c}=e,l=r(e,["lazy","src","placeholder","key","ref","children"]);if(!t)return this.state.image=(0,i.h)("img",Object.assign({src:n},l)),this.state.image;if(this.state.isLoaded)return this.state.image;if("string"==typeof o)return(0,i.h)("img",Object.assign({src:o},l));if("function"==typeof o)return o();{const e={backgroundColor:"lightgray",width:"100px",height:"100px"},{width:t,height:n}=l,o=r(l,["width","height"]);return t&&(e.width=t),n&&(e.height=n),(0,i.h)("div",Object.assign({style:e},o))}}}t.Img=s},281:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ViraLink=t.Switch=t.Route=t.Visible=t.Suspense=t.Link=t.Img=t.Helmet=void 0;var r=n(826);Object.defineProperty(t,"Helmet",{enumerable:!0,get:function(){return r.Helmet}});var i=n(35);Object.defineProperty(t,"Img",{enumerable:!0,get:function(){return i.Img}});var o=n(570);Object.defineProperty(t,"Link",{enumerable:!0,get:function(){return o.Link}});var s=n(234);Object.defineProperty(t,"Suspense",{enumerable:!0,get:function(){return s.Suspense}});var a=n(45);Object.defineProperty(t,"Visible",{enumerable:!0,get:function(){return a.Visible}});var c=n(515);Object.defineProperty(t,"Route",{enumerable:!0,get:function(){return c.Route}}),Object.defineProperty(t,"Switch",{enumerable:!0,get:function(){return c.Switch}}),Object.defineProperty(t,"ViraLink",{enumerable:!0,get:function(){return c.Link}})},570:function(e,t,n){var r=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n};Object.defineProperty(t,"__esModule",{value:!0}),t.Link=void 0;const i=n(223),o=n(826);class s extends i.Component{mount(){const{prefetch:e,href:t,delay:n,back:r=!1}=this.props;r&&this.elements[0].addEventListener("click",function(e){e.preventDefault(),e.target.href===document.referrer?window.history.back():window.location.href=t}.bind(this)),n&&this.elements[0].addEventListener("click",function(e){e.preventDefault(),setTimeout((()=>{window.location.href=t}),n)}.bind(this)),e&&("hover"===e?this.prefetchOnHover():"visible"===e?this.prefetchOnVisible():this.addPrefetch())}prefetchOnHover(){this.elements[0].addEventListener("mouseover",function(){this.addPrefetch()}.bind(this),{once:!0})}prefetchOnVisible(){new IntersectionObserver(((e,t)=>{for(const n of e)n.isIntersecting&&(t.disconnect(),this.addPrefetch())}),{threshold:[0,1]}).observe(this.elements[0])}addPrefetch(){let e=!1;const t=document.getElementsByTagName("link");for(const n of t)"prefetch"===n.getAttribute("rel")&&n.getAttribute("href")===this.props.href&&(e=!0);if(!e){const e=(0,i.h)("link",{rel:"prefetch",href:this.props.href,as:"document"});document.head.appendChild(e)}}render(){const e=this.props,{children:t,prefetch:n,delay:s,back:a=!1,ref:c}=e,l=r(e,["children","prefetch","delay","back","ref"]),d=(0,i.h)("a",Object.assign({},l),...t);if(n&&isSSR){const e=(0,i.h)("link",{rel:"prefetch",href:this.props.href,as:"document"}),t=(0,i.h)(o.Helmet,null,e);return(0,i.h)(i.Fragment,null,[t,d])}return d}}t.Link=s},515:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Link=t.to=t.Route=t.Switch=void 0;const r=n(223),i=[];function o(e){window.history.pushState({},"",e);for(const e of i)e.forceUpdate()}function s(e){window.history.replaceState({},"",e);for(const e of i)e.forceUpdate()}function a(e,t){const{exact:n=!1,regex:r}=t;let i,{path:o}=t;if(!o)return{path:null,url:e,isExact:!0};let s={};if(o.includes("/:")){const t=o.split("/"),n=e.split("/");t.forEach(((e,i)=>{if(/^:/.test(e)){const o=e.slice(1),a=n[i];if(r&&r[o]&&!r[o].test(a))return null;s=Object.assign(Object.assign({},s),{[o]:a}),t[i]=n[i]}})),o=t.join("/")}if("*"===o&&(i=[e]),i||(i=new RegExp(`^${o}`).exec(e)),!i)return null;const a=i[0],c=e===a;return n&&!c?null:{path:o,url:a,isExact:c,params:s}}class c extends r.Component{constructor(){super(...arguments),this.index=0,this.path="",this.match={index:-1,path:""}}mount(){window.addEventListener("popstate",this.forceUpdate.bind(this)),i.push(this)}destroy(){i.splice(i.indexOf(this),1),window.removeEventListener("popstate",this.forceUpdate.bind(this))}forceUpdate(){this.findChild(),this.shouldUpdate()&&this.update()}findChild(){this.match={index:-1,path:""};for(const[e,t]of this.props.children.entries()){const{path:n,exact:r,regex:i}=t.props;if(a("undefined"!=typeof isSSR?_nano.location.pathname:window.location.pathname,{path:n,exact:r,regex:i}))return this.match.index=e,void(this.match.path=n)}}shouldUpdate(){return this.path!==this.match.path||this.index!==this.match.index}render(){this.findChild();const e=this.props.children[this.match.index];if(-1===this.match.index&&(this.path="",this.index=0),e){const{path:t}=e.props;this.path=t,this.index=this.match.index;const n=(0,r.renderElement)(e);return(0,r.renderElement)(n)}return this.props.fallback?(0,r.renderElement)(this.props.fallback):(0,r.h)("div",{class:"route"},"not found")}}t.Switch=c,t.Route=function({path:e,regex:t,children:n}){for(const r of n)r.props&&(r.props=Object.assign(Object.assign({},r.props),{route:{path:e,regex:t}}));return n},t.to=(e,t=!1)=>{t?s(e):o(e)},t.Link=function({to:e,replace:t,children:n}){return(0,r.h)("a",{href:e,onClick:function(n){n.preventDefault(),t?s(e):o(e)}},n)}},234:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))},i=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n};Object.defineProperty(t,"__esModule",{value:!0}),t.Suspense=void 0;const o=n(223),s=n(930);class a extends o.Component{constructor(e){super(e),this.isReady=!1;const t=this.props,{fallback:n,cache:r=!1,children:o}=t,a=i(t,["fallback","cache","children"]);this.id=(0,s.strToHash)(JSON.stringify(a,(function(e,t){return"function"==typeof t?`${t}`:t})))}mount(){return r(this,void 0,void 0,(function*(){const e=this.props,{fallback:t,cache:n=!1,children:r}=e,o=i(e,["fallback","cache","children"]);if(n&&(this.initialState={}),this.loadFromCache(n))return;const s=Object.values(o).map((e=>e())),a=yield Promise.all(s),c=this.prepareData(o,a,n);this.addDataToChildren(c),this.isReady=!0,this.update()}))}loadFromCache(e){const t=this.state&&e&&Object.keys(this.state).length;return e&&(this.addDataToChildren(this.state),this.isReady=!0),t}ssr(){const e=this.props,{fallback:t,cache:n=!1,children:r}=e,o=i(e,["fallback","cache","children"]),s=Object.values(o).map((e=>e())),a=this.prepareData(o,s,!1);this.addDataToChildren(a)}addDataToChildren(e){for(const t of this.props.children)t.props&&(t.props=Object.assign(Object.assign({},t.props),e))}prepareData(e,t,n){return Object.keys(e).reduce(((e,r,i)=>(n&&(this.state=Object.assign(Object.assign({},this.state),{[r]:t[i]})),Object.assign(Object.assign({},e),{[r]:t[i]}))),{})}render(){if("undefined"==typeof isSSR){const{cache:e=!1}=this.props;return this.loadFromCache(e),this.isReady?this.props.children:this.props.fallback}return this.ssr(),this.props.children}}t.Suspense=a},45:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Visible=void 0;const r=n(223);class i extends r.Component{constructor(){super(...arguments),this.isVisible=!1}mount(){new IntersectionObserver(((e,t)=>{for(const n of e)n.isIntersecting&&(t.disconnect(),this.isVisible=!0,this.update())}),{threshold:[0,1]}).observe(this.elements[0])}render(){return this.isVisible?(this.props.onVisible&&this.props.onVisible(),(0,r.render)(this.props.component||this.props.children[0])):(0,r.h)("div",{"data-visible":!1,visibility:"hidden"})}}t.Visible=i},547:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.appendChildren=void 0;const r=n(223);t.appendChildren=function e(t,n){if(Array.isArray(n)){"object"==typeof n&&(n=Array.from(n));for(const i of n)if(Array.isArray(i))e(t,i);else{let n=(0,r.renderElement)(i);n&&(Array.isArray(n)?e(t,n):t.appendChild((null==n?void 0:n.nodeType)?n:document.createTextNode(""+n)))}}else e(t,[n])}},844:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Component=void 0;const r=n(930),i=n(223);t.Component=class{constructor(e){this.props=e,this._elements=[],this.id=this._getHash()}render(e){}mount(){}beforeMount(){}destroy(){}_getHash(){}setState(e,t=!1){this.state=e&&"object"==typeof e?Object.assign(Object.assign({},this.state),e):e,t&&this.update()}get state(){return i._state.get(this.id)}set state(e){i._state.set(this.id,e)}set initialState(e){this.state||(this.state=e)}get elements(){return this._elements}set elements(e){Array.isArray(e)||(e=[e]);for(const t of e)this._elements.push(t)}addNodeRemoveListener(){/^[^{]+{\s+}$/gm.test(this.destroy.toString())||(0,r.onNodeRemove)(this.elements[0],(()=>{this._skipUnmout||this.destroy()}))}_mount(){this.addNodeRemoveListener(),this.mount()}_destory(){this._hasUnmounted||(this.destroy(),this._hasUnmounted=!0)}update(e){this._skipUnmout=!0;const t=[...this.elements];this._elements=[];let n=this.render(e);n=(0,i.renderElement)(n),this.elements=n;const o=t[0].parentElement;o||console.warn("Component needs a parent element to get updated!");for(const e of this.elements)o.insertBefore(e,t[0]);for(let e of t)e.remove(),e=null;this.addNodeRemoveListener(),(0,r.nextTick)((()=>{this._skipUnmout=!1,this.elements[0].isConnected||this._destory()}))}}},55:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createContext=void 0,t.createContext=function(e){let t=e;return{Provider(e){if(e.value)return t=e.value,e.children},Consumer:e=>({component:e.children[0](t),props:Object.assign(Object.assign({},e),{context:t})}),get:()=>t,set(e){t=e}}}},742:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Fragment=void 0,t.Fragment=e=>e.children},58:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.h=void 0;const r=n(930),i=n(223);t.h=function(e,t,...n){if("string"!=typeof e)return{component:e,props:Object.assign(Object.assign({},t),{children:n})};let o;const s="svg"===e?(0,i.hNS)("svg"):document.createElement(e);for(const e in t){if("style"===e&&"object"==typeof t[e]){const n=Object.keys(t[e]).map((n=>`${n}:${t[e][n]}`)).join(";").replace(/[A-Z]/g,(e=>`-${e.toLowerCase()}`));t[e]=n+";"}"ref"===e&&(o=t[e]),(0,r.isEvent)(s,e.toLowerCase())?s.addEventListener(e.toLowerCase().substring(2),(n=>t[e](n))):s.setAttribute(e,t[e])}return(0,i.appendChildren)(s,n),o&&o(s),s.ssr?s.ssr:s}},75:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.hydrate=void 0;const r=n(223);t.hydrate=function(e,t=null,n=!0){return(0,r.render)(e,t,n)}},223:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Store=t.withStyles=t.lazyHydration=t._clearState=t._state=t.createContext=t.Fragment=t.Component=t.hydrate=t.hNS=t.renderElement=t.render=t.h=t.appendChildren=void 0;var r=n(547);Object.defineProperty(t,"appendChildren",{enumerable:!0,get:function(){return r.appendChildren}});var i=n(58);Object.defineProperty(t,"h",{enumerable:!0,get:function(){return i.h}});var o=n(455);Object.defineProperty(t,"render",{enumerable:!0,get:function(){return o.render}});var s=n(255);Object.defineProperty(t,"renderElement",{enumerable:!0,get:function(){return s.renderElement}}),Object.defineProperty(t,"hNS",{enumerable:!0,get:function(){return s.hNS}});var a=n(75);Object.defineProperty(t,"hydrate",{enumerable:!0,get:function(){return a.hydrate}});var c=n(844);Object.defineProperty(t,"Component",{enumerable:!0,get:function(){return c.Component}});var l=n(742);Object.defineProperty(t,"Fragment",{enumerable:!0,get:function(){return l.Fragment}});var d=n(55);Object.defineProperty(t,"createContext",{enumerable:!0,get:function(){return d.createContext}});var u=n(83);Object.defineProperty(t,"_state",{enumerable:!0,get:function(){return u._state}}),Object.defineProperty(t,"_clearState",{enumerable:!0,get:function(){return u._clearState}});var h=n(228);Object.defineProperty(t,"lazyHydration",{enumerable:!0,get:function(){return h.lazyHydration}});var p=n(786);Object.defineProperty(t,"withStyles",{enumerable:!0,get:function(){return p.withStyles}});var f=n(751);Object.defineProperty(t,"Store",{enumerable:!0,get:function(){return f.Store}})},228:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lazyHydration=void 0;const r=n(281),i=n(223);t.lazyHydration=function(e,t,n=!0){const o=(0,i.h)(r.Visible,null,e);return(0,i.hydrate)(o,t,n)}},455:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.removeAllChildNodes=t.render=void 0;const r=n(223);function i(e){for(;e.firstChild;)e.removeChild(e.firstChild)}t.render=function(e,t=null,n=!0){let o=(0,r.renderElement)(e);return Array.isArray(o)&&(o=o.map((e=>(0,r.renderElement)(e))),1===o.length&&(o=o[0])),t?(n&&i(t),o&&t.id&&t.id===o.id&&t.parentElement?t.parentElement.replaceChild(o,t):Array.isArray(o)?o.map((e=>(0,r.appendChildren)(t,(0,r.renderElement)(e)))):(0,r.appendChildren)(t,(0,r.renderElement)(o)),t.ssr?t.ssr:t):"boolean"==typeof isSSR&&isSSR&&!Array.isArray(o)?[o]:o},t.removeAllChildNodes=i},255:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.hNS=t.renderElement=void 0;const r=n(930);function i(e){return document.createElementNS("http://www.w3.org/2000/svg",e)}t.renderElement=function e(t){var n;return["undefined"].includes(typeof t)||null==t?[]:"string"==typeof t?t:"number"==typeof t?""+t:(null==t?void 0:t.tagName)&&"svg"===t.tagName.toLowerCase()?function(e){const t=e.children[0],n=t.attributes,r=i("svg");for(const e of n)r.setAttribute(e.name,e.value);return r.innerHTML=t.innerHTML,r}({children:[t]}):(null==t?void 0:t.tagName)?t:t&&t.component&&t.component.prototype&&t.component.prototype.constructor&&/^class\s/.test(Function.prototype.toString.call(t.component))?function(t){const{component:n,props:i}=t,o=(0,r.strToHash)(n.toString());n.prototype._getHash=()=>o;const s=new n(i);s.beforeMount();let a=s.render();return a=e(a),s.elements=a,(null==i?void 0:i.ref)&&i.ref(s),"undefined"==typeof isSSR&&(0,r.nextTick)((()=>{s._mount()})),a}(t):t.component&&"function"==typeof t.component?function(t){const{component:n,props:r}=t;return e(n(r))}(t):Array.isArray(t)?t.map((t=>e(t))).flat():"function"==typeof t?e(t()):(null===(n=null==t?void 0:t.component)||void 0===n?void 0:n.tagName)&&"string"==typeof t.component.tagName||Array.isArray(t.component)||t.component?e(t.component):void 0},t.hNS=i},83:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._clearState=t._state=void 0,t._state=new Map,t._clearState=function(){t._state.clear()}},751:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Store=void 0,t.Store=class{constructor(e,t="",n="memory"){if(this._listeners=new Map,isSSR&&(n="memory"),this._id=t,this._storage=n,this._state=this._prevState=e,!this._storage||"memory"===this._storage)return;const r="local"===n?localStorage:sessionStorage,i=r.getItem(this._id);i?this._state=this._prevState=JSON.parse(i):r.setItem(this._id,JSON.stringify(e))}persist(e){"memory"!==this._storage&&("local"===this._storage?localStorage:sessionStorage).setItem(this._id,JSON.stringify(e))}clear(){this._state=this._prevState=void 0,("local"===this._storage?localStorage:sessionStorage).removeItem(this._id)}set state(e){this._prevState=this._state,this._state=e,this.persist(e),this._listeners.forEach((e=>{e(this._state,this._prevState)}))}get state(){return this._state}setState(e){this.state=e}use(){const e=Math.random().toString(36).substr(2,9),t=this;return{get state(){return t.state},setState(e){t.setState(e)},subscribe(n){t._listeners.set(e,n)},cancel(){t._listeners.delete(e)}}}}},786:function(e,t,n){var r=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n};Object.defineProperty(t,"__esModule",{value:!0}),t.withStyles=void 0;const i=n(281),o=n(223);t.withStyles=function(e){return function(t){return class extends o.Component{render(){const n=this.props,{children:s}=n,a=r(n,["children"]),c=(0,o.h)(i.Helmet,null,(0,o.h)("style",null,e.toString())),l=s.length?(0,o.h)(t,Object.assign({},a),s):(0,o.h)(t,Object.assign({},this.props));return(0,o.h)(o.Fragment,null,c,l)}}}}},920:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Visible=t.Helmet=t.Img=t.ViraLink=t.Route=t.Switch=t.Link=t.Suspense=t.Store=t.lazyHydration=t.createContext=t.withStyles=t.Component=t.Fragment=t.hydrate=t.render=t.h=t.renderToString=t.nextTick=void 0;var r=n(930);Object.defineProperty(t,"nextTick",{enumerable:!0,get:function(){return r.nextTick}});var i=n(431);Object.defineProperty(t,"renderToString",{enumerable:!0,get:function(){return i.renderToString}});var o=n(223);Object.defineProperty(t,"h",{enumerable:!0,get:function(){return o.h}}),Object.defineProperty(t,"render",{enumerable:!0,get:function(){return o.render}}),Object.defineProperty(t,"hydrate",{enumerable:!0,get:function(){return o.hydrate}}),Object.defineProperty(t,"Fragment",{enumerable:!0,get:function(){return o.Fragment}}),Object.defineProperty(t,"Component",{enumerable:!0,get:function(){return o.Component}}),Object.defineProperty(t,"withStyles",{enumerable:!0,get:function(){return o.withStyles}}),Object.defineProperty(t,"createContext",{enumerable:!0,get:function(){return o.createContext}}),Object.defineProperty(t,"lazyHydration",{enumerable:!0,get:function(){return o.lazyHydration}}),Object.defineProperty(t,"Store",{enumerable:!0,get:function(){return o.Store}});var s=n(281);Object.defineProperty(t,"Suspense",{enumerable:!0,get:function(){return s.Suspense}}),Object.defineProperty(t,"Link",{enumerable:!0,get:function(){return s.Link}}),Object.defineProperty(t,"Switch",{enumerable:!0,get:function(){return s.Switch}}),Object.defineProperty(t,"Route",{enumerable:!0,get:function(){return s.Route}}),Object.defineProperty(t,"ViraLink",{enumerable:!0,get:function(){return s.ViraLink}}),Object.defineProperty(t,"Img",{enumerable:!0,get:function(){return s.Img}}),Object.defineProperty(t,"Helmet",{enumerable:!0,get:function(){return s.Helmet}}),Object.defineProperty(t,"Visible",{enumerable:!0,get:function(){return s.Visible}});const a=n(223),c=n(431);t.default={render:a.render,hydrate:a.hydrate,h:a.h,lazyHydration:a.lazyHydration,renderToString:c.renderToString,Fragment:a.Fragment}},833:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentSSR=void 0;const r=n(431);t.DocumentSSR=class{constructor(){this.body=this.createElement("body"),this.head=this.createElement("head")}createElement(e){return new r.HTMLElementSSR(e)}createElementNS(e,t){return new r.HTMLElementSSR(t)}createTextNode(e){return e}querySelector(e){}}},408:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.HTMLElementSSR=void 0,t.HTMLElementSSR=class{constructor(e){this.tagName=e,["area","base","br","col","embed","hr","img","input","link","meta","param","source","track","wbr"].indexOf(e)>=0?(this.ssr=`<${e} />`,this.selfClosing=!0):this.ssr=`<${e}></${e}>`}get outerHTML(){return this.innerText}get innerHTML(){var e,t;return null!==(t=null===(e=/(^<[a-z]+>)([\s\S]*)(<\/[a-z]+>$)/gm.exec(this.ssr))||void 0===e?void 0:e[2])&&void 0!==t?t:""}get innerText(){var e,t;return null!==(t=null===(e=/(^<[^>]+>)(.+)?(<\/[a-z]+>$|\/>$)/gm.exec(this.ssr))||void 0===e?void 0:e[2])&&void 0!==t?t:""}set innerText(e){this.ssr=this.ssr.replace(/(^<[^>]+>)(.+)?(<\/[a-z]+>$|\/>$)/gm,`$1${e}$3`)}get attributes(){return{length:1}}get children(){const e=/<([a-z]+)((?!<\/\1).)*<\/\1>/gms,t=[];let n;for(;null!==(n=e.exec(this.innerHTML));)t.push(n[0].replace(/[\s]+/gm," "));return t}setAttributeNS(e,t){this.setAttribute(e,t)}setAttribute(e,t){this.selfClosing?this.ssr=this.ssr.replace(/(^<[a-z]+ )(.+)/gm,`$1${e}="${t}" $2`):this.ssr=this.ssr.replace(/(^<[^>]+)(.+)/gm,`$1 ${e}="${t}"$2`)}appendChild(e){const t=e.ssr?e.ssr:e,n=this.ssr.lastIndexOf("</");this.ssr=this.ssr.substring(0,n)+t+this.ssr.substring(n)}replaceChild(e,t){this.innerText=e.ssr}addEventListener(e,t,n){}}},431:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.HTMLElementSSR=t.DocumentSSR=t.renderToString=void 0;var r=n(53);Object.defineProperty(t,"renderToString",{enumerable:!0,get:function(){return r.renderToString}});var i=n(833);Object.defineProperty(t,"DocumentSSR",{enumerable:!0,get:function(){return i.DocumentSSR}});var o=n(408);Object.defineProperty(t,"HTMLElementSSR",{enumerable:!0,get:function(){return o.HTMLElementSSR}})},53:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.renderToString=t.initSSR=void 0;const r=n(431),i=n(223),o=n(930);function s(e="/"){_nano.location={pathname:e},globalThis.document=isSSR?new r.DocumentSSR:window.document}globalThis.isSSR=!0===(0,o.detectSSR)()||void 0,globalThis._nano={isSSR,location:{pathname:"/"}},t.initSSR=s,t.renderToString=function(e,t={}){const{pathname:n,clearState:r=!0}=t;return s(n),r&&i._state.clear(),(0,i.render)(e,null,!0).join("")}},930:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.addStylesToHead=t.nodeToString=t.task=t.onNodeRemove=t.isDescendant=t.strToHash=t.detectSSR=t.isEvent=t.nextTick=void 0;const r=n(920);function i(e,t){return e&&(e===t||i(e.parentNode,t))}t.nextTick="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,t.isEvent=function(e,t){return 0===t.indexOf("on")&&(!!e.ssr||["function","object"].includes(typeof e[t]))},t.detectSSR=function(){return"undefined"!=typeof Deno||"undefined"==typeof window},t.strToHash=function(e){let t=0;if(!e.length)return t;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return Math.abs(t).toString(32)},t.isDescendant=i,t.onNodeRemove=function(e,t){let n=new MutationObserver((r=>{for(const o of r)o.removedNodes.forEach((r=>{i(e,r)&&(t(),n&&(n.disconnect(),n=void 0))}))}));return n.observe(document,{childList:!0,subtree:!0}),n},t.task=function(e){return setTimeout(e,0)},t.nodeToString=function(e){const t=document.createDocumentFragment();return t.appendChild(e.cloneNode(!0)),t.toString()},t.addStylesToHead=(e,t)=>{if(!document.querySelector(`[data-css-hash*="${t}"]`)){const n=(0,r.h)("style",{"data-css-hash":t},e);document.head.appendChild(n)}}}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}var r={};(()=>{var e=r;const t=n(223);e.default={h:t.h,render:t.render}})(),vira=r.default})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,