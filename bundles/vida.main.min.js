var vida;
(() => {
  "use strict";
  var e = {
      d: (t, r) => {
        for (var n in r)
          e.o(r, n) &&
            !e.o(t, n) &&
            Object.defineProperty(t, n, { enumerable: !0, get: r[n] });
      },
      o: (e, t) => Object.prototype.hasOwnProperty.call(e, t),
    },
    t = {};
  function r(e) {
    return ["undefined"].includes(typeof e)
      ? []
      : "string" == typeof e
      ? e
      : "number" == typeof e
      ? "" + e
      : e?.tagName
      ? e
      : "function" == typeof e
      ? r(e())
      : e.component && "function" == typeof e.component
      ? (function (e) {
          const { component: t, props: n } = e;
          return r(t(n));
        })(e)
      : Array.isArray(e)
      ? e.map((e) => o(e)).flat()
      : void 0;
  }
  function n(e, t) {
    if (Array.isArray(t)) {
      "object" == typeof t && (t = Array.from(t));
      for (const o of t)
        if (Array.isArray(o)) n(e, o);
        else {
          let t = r(o);
          t &&
            (Array.isArray(t)
              ? n(e, t)
              : e.appendChild(
                  t?.nodeType ? t : document.createTextNode("" + t),
                ));
        }
    } else n(e, [t]);
  }
  function o(e, t = null, o = !0) {
    let i = r(e);
    return (
      Array.isArray(i) &&
        ((i = i.map((e) => r(e))), 1 === i.length && (i = i[0])),
      t
        ? (o &&
            (function (e) {
              for (; e.firstChild; ) e.removeChild(e.firstChild);
            })(t),
          i && t.id && i.id && t.id === i.id && t.parentElement
            ? void t.parentElement.replaceChild(i, t)
            : (Array.isArray(i) ? i.map((e) => n(t, r(e))) : n(t, r(i)), t))
        : Array.isArray(i)
        ? i
        : [i]
    );
  }
  e.d(t, { default: () => i });
  const i = {
    nextTick: function () {
      return "function" == typeof Promise
        ? Promise.prototype.then.call(Promise.resolve())
        : setTimeout;
    },
    h: function (e, t, ...r) {
      if ("string" != typeof e)
        return { component: e, props: { ...t, children: r } };
      const o = document.createElement(e);
      for (const e in t) {
        if ("style" === e && "object" == typeof t[e]) {
          const r = Object.keys(t[e])
            .map((r) => `${r}:${t[e][r]}`)
            .join(";")
            .replace(/[A-Z]/g, (e) => `-${e.toLowerCase()}`);
          t[e] = r + ";";
        }
        (i = o),
          ~(a = e.toLowerCase()).indexOf("on") &&
          ["function", "object"].includes(typeof i[a])
            ? o.addEventListener(e.toLowerCase().substring(2), (r) => t[e](r))
            : o.setAttribute(e, t[e]);
      }
      var i, a;
      return n(o, r), o;
    },
    render: o,
  };
  vida = t.default;
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
